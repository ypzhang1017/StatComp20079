devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
FCM <- function(dat, k){
m <- 2
iter.max <- 1000
eps <- 1e-06
dat <- as.matrix(dat)
set.seed(6386)
v0 <- dat[sample(nrow(dat), 3),] #初始聚类中心
n <- nrow(dat)
d <- matrix(0, n, k)#初始距离矩阵
for (j in 1:k) {
d[, j] = sqrt(rowSums(sweep(dat, 2, v0[j, ], "-")^2))#J.i,欧几里得距离
}
u <- matrix(NA, n, k)#初始隶属矩阵
for (j in 1:k){
for (i in 1:n){
if (any(d[i,] == 0)){
u[i, ] <- rep(1/k, k)
}else{
u[i, j] <- 1/(sum((d[i, j]/d[i, ])^(2/(m - 1))))
}
}
}
v <- t(u^m) %*% dat/colSums(u^m)
J <- sum(d^2 * (u^m)) #目标函数
iter <- 0
j.best <- Inf
while((iter < iter.max) && (abs(j - j.best) > eps)){
j.best <- J
for (j in 1:k) {
d[, j] = sqrt(rowSums(sweep(dat, 2, v[j, ], "-")^2))
}
for (j in 1:k){
for (i in 1:n){
if (any(d[i,] == 0)){
u[i, ] <- rep(1/k, k)
}else{
u[i, j] <- 1/(sum((d[i, j]/d[i, ])^(2/(m - 1))))#更新隶属矩阵
}
}
}
v <- t(u^m) %*% dat/colSums(u^m)
J <- sum(d^2 * (u^m))
iter = iter + 1
}
cluster_id <-  apply(u, 1, which.max)
result <- list()
result$u <- u
result$v <- v
result$cluster_id <- cluster_id
return(result)
}
data <- iris[,2:4]
result <- FCM(data,3)
plot(iris$Sepal.Width,iris$Petal.Width,col=result$cluster_id,main="模糊聚类结果可视化",pch=19)
FCM <- function(dat, k){
m <- 2
iter.max <- 1000
eps <- 1e-06
dat <- as.matrix(dat)
set.seed(6386)
v0 <- dat[sample(nrow(dat), k),] #初始聚类中心
n <- nrow(dat)
d <- matrix(0, n, k)#初始距离矩阵
for (j in 1:k) {
d[, j] = sqrt(rowSums(sweep(dat, 2, v0[j, ], "-")^2))#J.i,欧几里得距离
}
u <- matrix(NA, n, k)#初始隶属矩阵
for (j in 1:k){
for (i in 1:n){
if (any(d[i,] == 0)){
u[i, ] <- rep(1/k, k)
}else{
u[i, j] <- 1/(sum((d[i, j]/d[i, ])^(2/(m - 1))))
}
}
}
v <- t(u^m) %*% dat/colSums(u^m)
J <- sum(d^2 * (u^m)) #目标函数
iter <- 0
j.best <- Inf
while((iter < iter.max) && (abs(j - j.best) > eps)){
j.best <- J
for (j in 1:k) {
d[, j] = sqrt(rowSums(sweep(dat, 2, v[j, ], "-")^2))
}
for (j in 1:k){
for (i in 1:n){
if (any(d[i,] == 0)){
u[i, ] <- rep(1/k, k)
}else{
u[i, j] <- 1/(sum((d[i, j]/d[i, ])^(2/(m - 1))))#更新隶属矩阵
}
}
}
v <- t(u^m) %*% dat/colSums(u^m)
J <- sum(d^2 * (u^m))
iter = iter + 1
}
cluster_id <-  apply(u, 1, which.max)
result <- list()
result$u <- u
result$v <- v
result$cluster_id <- cluster_id
return(result)
}
data <- iris[,2:4]
result <- FCM(data,3)
plot(iris$Sepal.Width,iris$Petal.Width,col=result$cluster_id,main="模糊聚类结果可视化",pch=19)
devtools::document()
rm(list = c("FCM"))
devtools::document()
devtools::build_vignettes()
\
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
FCM <- function(dat, k){
m <- 2
iter.max <- 1000
eps <- 1e-06
dat <- as.matrix(dat)
set.seed(6386)
v0 <- dat[sample(nrow(dat), k),] #初始聚类中心
n <- nrow(dat)
d <- matrix(0, n, k)#初始距离矩阵
for (j in 1:k) {
d[, j] = sqrt(rowSums(sweep(dat, 2, v0[j, ], "-")^2))#J.i,欧几里得距离
}
u <- matrix(NA, n, k)#初始隶属矩阵
for (j in 1:k){
for (i in 1:n){
if (any(d[i,] == 0)){
u[i, ] <- rep(1/k, k)
}else{
u[i, j] <- 1/(sum((d[i, j]/d[i, ])^(2/(m - 1))))
}
}
}
v <- t(u^m) %*% dat/colSums(u^m)
J <- sum(d^2 * (u^m)) #目标函数
iter <- 0
j.best <- Inf
while((iter < iter.max) && (abs(j - j.best) > eps)){
j.best <- J
for (j in 1:k) {
d[, j] = sqrt(rowSums(sweep(dat, 2, v[j, ], "-")^2))
}
for (j in 1:k){
for (i in 1:n){
if (any(d[i,] == 0)){
u[i, ] <- rep(1/k, k)
}else{
u[i, j] <- 1/(sum((d[i, j]/d[i, ])^(2/(m - 1))))#更新隶属矩阵
}
}
}
v <- t(u^m) %*% dat/colSums(u^m)
J <- sum(d^2 * (u^m))
iter = iter + 1
}
cluster_id <-  apply(u, 1, which.max)
result <- list()
result$u <- u
result$v <- v
result$cluster_id <- cluster_id
return(result)
}
data(iris)
dat <- iris[,2:4]
result <- FCM(dat,3)
plot(iris$Sepal.Width,iris$Petal.Width,col=result$cluster_id,main="模糊聚类结果可视化",pch=19)
library(StatComp20079)
data(iris)
dat <- iris[,2:4]
result <- FCM(dat,3)
plot(iris$Sepal.Width,iris$Petal.Width,col=result$cluster_id,main="模糊聚类结果可视化",pch=19)
library(StatComp20079)
data(iris)
dat <- iris[,2:4]
result <- FCM(dat,3)
plot(iris$Sepal.Width,iris$Petal.Width,col=result$cluster_id,main="模糊聚类结果可视化",pch=19)
devtools::document()
devtools::check()
devtools::document()
rm(list = c("FCM"))
devtools::build_vignettes()
devtools::build()
1
devtools::build()
install.packages('../StatComp_1.0.tar.gz',repo=NULL)
install.packages('../StatComp20079_1.0.tar.gz',repo=NULL)
install.packages('../StatComp20079_1.0.tar.gz',repo=NULL)
